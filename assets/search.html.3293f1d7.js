import{_ as d,W as e,X as t,a1 as a}from"./framework.00b47ed6.js";const c={},o=a('<h1 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索" aria-hidden="true">#</a> 搜索</h1><h3 id="如何使用" tabindex="-1"><a class="header-anchor" href="#如何使用" aria-hidden="true">#</a> 如何使用</h3><p>按照以下步骤开启搜索:</p><ol><li>转到<code>索引</code>页，选择一个搜索索引，并单击<code>保存</code>;</li><li>保存索引后，单击<code>构建索引</code>来构建索引;</li><li>现在你可以通过点击页面右上角的搜索块或使用快捷键<code>Ctrl + F</code>来搜索文件。</li></ol><h3 id="不同搜索索引之间的差异" tabindex="-1"><a class="header-anchor" href="#不同搜索索引之间的差异" aria-hidden="true">#</a> 不同搜索索引之间的差异</h3><ul><li><code>database</code>:按数据库搜索，它使用现有的 data.db。它将创建一个新表，记录父目录、名称和每个对象的大小，但搜索不拆分单词，这意味着匹配您输入的关键字是否出现在对象的名称中。一般来说，如果您没有特定的搜索要求，我们建议您选择它。</li><li><code>bleve</code>:一个开源全文搜索引擎。它将分割对象名称中的单词，并搜索您输入的关键字。但它的搜索结果可能很奇怪，你不能得到你想要的结果，而且它会占用更多的资源。</li></ul><p>下表可以快速帮助您理解这两个搜索索引之间的区别:</p><table><thead><tr><th></th><th>database</th><th>bleve</th></tr></thead><tbody><tr><td>搜索结果</td><td>精确匹配</td><td>模糊匹配</td></tr><tr><td>搜索速度</td><td>快</td><td>快</td></tr><tr><td>指定文件夹搜索</td><td>支持</td><td>不支持</td></tr><tr><td>硬盘占用</td><td>低</td><td>高</td></tr><tr><td>自动增量更新</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="搜索提示" tabindex="-1"><a class="header-anchor" href="#搜索提示" aria-hidden="true">#</a> 搜索提示</h3><ul><li>如果你想搜索一个特定的文件夹，你必须选择<code>database</code>作为搜索索引;</li><li>如果你选择<code>database</code>作为搜索索引，你的数据库类型是<code>sqlite3</code>，我们建议你在创建索引时不要在管理页面做任何更改，因为 <code>sqlite3</code> 不支持并发写，可能导致<code>数据库锁定</code>问题;</li><li>如果你选择<code>bleve</code>作为搜索索引，如果你想搜索新文件或不想搜索已删除的文件，索引需要完全重建才能生效，因为<code>bleve</code>不支持增量更新;</li><li>但对于<code>database</code>，它支持增量更新，所以你可以搜索新的文件或删除的文件，只需访问修改的文件夹(并单击&#39;刷新&#39;图标，如果缓存)，无需重建索引，这比<code>bleve</code>方便得多。</li></ul>',10),l=[o];function r(i,h){return e(),t("div",null,l)}const n=d(c,[["render",r],["__file","search.html.vue"]]);export{n as default};
