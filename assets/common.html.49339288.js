import{_ as p}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as u,c as f,a as e,b as o,w as a,e as r,d as t,r as n}from"./app.043b782f.js";const _={},m=r('<h1 id="common" tabindex="-1"><a class="header-anchor" href="#common" aria-hidden="true">#</a> Common</h1><h3 id="mount-path" tabindex="-1"><a class="header-anchor" href="#mount-path" aria-hidden="true">#</a> Mount Path</h3><p>Unique identifier, that is the location you want to mount to, if you want to mount to the root directory, it is <code>/</code></p><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> Order</h3><p>When there are multiple accounts, it is used for sorting, The smaller the more forward</p><h3 id="remark" tabindex="-1"><a class="header-anchor" href="#remark" aria-hidden="true">#</a> Remark</h3><p>Anything you want to fill in, which is just for reminding you what this storage is</p><h3 id="cache-expiration" tabindex="-1"><a class="header-anchor" href="#cache-expiration" aria-hidden="true">#</a> Cache Expiration</h3><p>Cache time of directory structure.</p><h3 id="web-proxy" tabindex="-1"><a class="header-anchor" href="#web-proxy" aria-hidden="true">#</a> Web proxy</h3>',10),y=t("Whether the web preview,download and the direct link go through the transfer. If you open this, recommended you set "),b=t("Api url"),g=t(" so that alist can works fine."),x=e("h3",{id:"webdav-policy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#webdav-policy","aria-hidden":"true"},"#"),t(" Webdav policy")],-1),k=e("ul",null,[e("li",null,"302 redirect: redirect to the real link"),e("li",null,"use proxy URL: redirect to proxy URL"),e("li",null,"native proxy: return data directly through local transit(best compatibility)")],-1),w=e("h3",{id:"download-proxy-url",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#download-proxy-url","aria-hidden":"true"},"#"),t(" Download proxy URL")],-1),v=e("p",null,"When the proxy is turned on without filling in this field, the local machine will be used for transfer by default.Two proxy methods are provided:",-1),E=t("You can use "),R=e("code",null,"cloudflare workers",-1),S=t(" for proxy, just fill in the "),T=e("code",null,"cloudflare workers",-1),L=t(" address here. The workers code can be found at "),A={href:"https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js",target:"_blank",rel:"noopener noreferrer"},U=t("https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js"),j=t(". in:"),q=e("ul",null,[e("li",null,[t("ADDRESS: your Alist address, The protocol header must be added, and cannot be followed by /. Such as "),e("code",null,"https://pan.nn.ci"),t(";")]),e("li",null,[t("TOKEN: you can get in "),e("code",null,"Other settings"),t(" in your Alist manage page.")])],-1),W=t("You can also use another machine for proxying, download the program at "),N={href:"https://github.com/alist-org/alist-proxy/releases",target:"_blank",rel:"noopener noreferrer"},O=t("https://github.com/alist-org/alist-proxy/releases"),C=e("p",null,[e("code",null,"./alist-proxy -help"),t(" to see how to use it.")],-1),V=r(`<p>You can even develop your own proxy program, the general steps are:</p><ul><li>When downloading, it will request <code>PROXY_URL/path?sign=sign_value</code></li><li>Verify sign in the proxy program, the calculation method of sign is:</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> sign <span class="token operator">=</span> <span class="token function">hmac</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>After verifying the sign is correct, requesting <code>HOST/api/fs/link</code>, you can get the URL of the file and the request header to be carried</li><li>Use the information to request and return</li></ul><h3 id="sort-related" tabindex="-1"><a class="header-anchor" href="#sort-related" aria-hidden="true">#</a> Sort related</h3><ul><li>Sort by: Sort by what</li><li>Sort direction: Whether the sort direction is ascending or descedning</li></ul><div class="custom-container info"><p class="custom-container-title">Info</p><p>Some drives use their own sorting method, which may be different.</p></div><h3 id="extract-folder" tabindex="-1"><a class="header-anchor" href="#extract-folder" aria-hidden="true">#</a> Extract folder</h3><ul><li>Extract to front: put all folders to the front when sorting</li><li>Extract to back: put all folders to the back when sorting</li></ul>`,9);function B(I,Y){const i=n("RouterLink"),s=n("ExternalLinkIcon"),l=n("Tabs");return u(),f("div",null,[m,e("p",null,[y,o(i,{to:"/config/site.html#api-url"},{default:a(()=>[b]),_:1}),g]),x,k,w,v,o(l,{data:[{title:"cloudflare workers"},{title:"Universal Binary"}]},{tab0:a(({title:c,value:d,isActive:h})=>[e("p",null,[E,R,S,T,L,e("a",A,[U,o(s)]),j]),q]),tab1:a(({title:c,value:d,isActive:h})=>[e("p",null,[W,e("a",N,[O,o(s)])]),C]),_:1}),V])}const P=p(_,[["render",B],["__file","common.html.vue"]]);export{P as default};
