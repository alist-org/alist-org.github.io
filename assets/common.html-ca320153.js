import{_ as u,N as f,a9 as m,Q as t,W as e,a1 as n,P as a,ag as i,G as o}from"./framework-ffef1a40.js";const g={},k=i('<h1 id="common" tabindex="-1"><a class="header-anchor" href="#common" aria-hidden="true">#</a> Common</h1><h3 id="mount-path" tabindex="-1"><a class="header-anchor" href="#mount-path" aria-hidden="true">#</a> Mount Path</h3><p>Unique identifier, that is the location you want to mount to, if you want to mount to the root directory, it is <code>/</code></p><h3 id="order" tabindex="-1"><a class="header-anchor" href="#order" aria-hidden="true">#</a> Order</h3><p>When there are multiple accounts, it is used for sorting, The smaller the more forward</p><h3 id="remark" tabindex="-1"><a class="header-anchor" href="#remark" aria-hidden="true">#</a> Remark</h3><p>Anything you want to fill in, which is just for reminding you what this storage is</p><h3 id="cache-expiration" tabindex="-1"><a class="header-anchor" href="#cache-expiration" aria-hidden="true">#</a> Cache Expiration</h3><p>Cache time of directory structure.</p><h3 id="web-proxy" tabindex="-1"><a class="header-anchor" href="#web-proxy" aria-hidden="true">#</a> Web proxy</h3>',10),_=t("h3",{id:"webdav-policy",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#webdav-policy","aria-hidden":"true"},"#"),e(" Webdav policy")],-1),y=t("ul",null,[t("li",null,"302 redirect: redirect to the real link"),t("li",null,"use proxy URL: redirect to proxy URL"),t("li",null,"native proxy: return data directly through local transit(best compatibility)")],-1),b=t("h3",{id:"description-of-three-modes",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#description-of-three-modes","aria-hidden":"true"},"#"),e(" Description of three modes")],-1),x=t("h3",{id:"download-proxy-url",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#download-proxy-url","aria-hidden":"true"},"#"),e(" Download proxy URL")],-1),w=t("p",null,"When the proxy is turned on without filling in this field, the local machine will be used for transfer by default.Two proxy methods are provided:",-1),v=t("code",null,"cloudflare workers",-1),S=t("code",null,"cloudflare workers",-1),C={href:"https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js",target:"_blank",rel:"noopener noreferrer"},L=t("ul",null,[t("li",null,[e("ADDRESS: your Alist address, The protocol header must be added, and cannot be followed by /. Such as "),t("code",null,"https://pan.nn.ci"),e(";")]),t("li",null,[e("TOKEN: you can get in "),t("code",null,"Other settings"),e(" in your Alist manage page.")])],-1),T=t("p",null,[e("⚠️ Cloudflare Workers free CDN supports domestic only "),t("strong",null,"http80 port"),e(" and "),t("strong",null,"https443 port"),e("，From group friend test")],-1),N=t("ul",null,[t("li",null,[e("When mounting the configuration in the Alist background, fill in the "),t("strong",null,"download proxy URL"),e(" at the end of the link without "),t("code",null,"/")])],-1),U={href:"https://github.com/alist-org/alist-proxy/releases",target:"_blank",rel:"noopener noreferrer"},j=t("p",null,[t("code",null,"./alist-proxy -help"),e(" to see how to use it.")],-1),A=i('<p>You can even develop your own proxy program, the general steps are:</p><ul><li>When downloading, it will request <code>PROXY_URL/path?sign=sign_value</code></li><li>Verify sign in the proxy program, the calculation method of sign is:</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> to_sign <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expireTimeStamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token keyword">const</span> _sign <span class="token operator">=</span> <span class="token function">safeBase64</span><span class="token punctuation">(</span><span class="token function">hmac_sha256</span><span class="token punctuation">(</span>to_sign<span class="token punctuation">,</span> <span class="token constant">TOKEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> sign <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>_sign<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>expireTimeStamp<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),M=t("code",null,"TOKEN",-1),K=i('<ul><li>After verifying the sign is correct, requesting <code>HOST/api/fs/link</code>, you can get the URL of the file and the request header to be carried</li><li>Use the information to request and return</li></ul><h3 id="sort-related" tabindex="-1"><a class="header-anchor" href="#sort-related" aria-hidden="true">#</a> Sort related</h3><ul><li>Sort by: Sort by what</li><li>Sort direction: Whether the sort direction is ascending or descedning</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>Some drives use their own sorting method, which may be different.</p></div><h3 id="extract-folder" tabindex="-1"><a class="header-anchor" href="#extract-folder" aria-hidden="true">#</a> Extract folder</h3><ul><li>Extract to front: put all folders to the front when sorting</li><li>Extract to back: put all folders to the back when sorting</li></ul>',6);function R(E,O){const r=o("RouterLink"),s=o("FlowChart"),l=o("ExternalLinkIcon"),c=o("Tabs");return f(),m("div",null,[k,t("p",null,[e("Whether the web preview,download and the direct link go through the transfer. If you open this, recommended you set "),n(r,{to:"/config/configuration.html#site_url"},{default:a(()=>[e("site_url")]),_:1}),e(" so that alist can works fine.")]),_,y,b,n(s,{id:"flowchart-56",code:"eJwztLUrLkksKrFSSM7JL01RSMkszuYysrVLzUuxUqjML+VSUOAy1CjKTM8o0dS1M+ICAHhNDlc=",preset:"vue"}),n(s,{id:"flowchart-57",code:"eJwzNLS1Ky5JLCqxUkjOyS9NUUjJLM7mMjKytcsvSC1KLMnMz7NSSMkvz8vJT0xRKCjKr6hUCA3ysbJThgnqggV1S4tyuIyNbe1S81KsFCrzS7kUuAwNNYoy0zNKNHXtjIzgTGNjLgApRCYC",preset:"vue"}),n(s,{id:"flowchart-58",code:"eJw9xjEOgCAMAMC9r+iogwOwkcBfCFQlEmpKMfH3bm5nTIhDk6jH3HgWLHVcYG2IfJMkrdw9DpKHBBvn1FAl9bGTgHMhUi8eX56AYMwi9Th13aK1P52DD3o7H5o=",preset:"vue"}),x,w,n(c,{id:"65",data:[{title:"cloudflare workers"},{title:"Universal Binary"}]},{tab0:a(({title:p,value:d,isActive:h})=>[t("p",null,[e("You can use "),v,e(" for proxy, just fill in the "),S,e(" address here. The workers code can be found at "),t("a",C,[e("https://github.com/alist-org/alist-proxy/blob/main/alist-proxy.js"),n(l)]),e(". in:")]),L,T,N]),tab1:a(({title:p,value:d,isActive:h})=>[t("p",null,[e("You can also use another machine for proxying, download the program at "),t("a",U,[e("https://github.com/alist-org/alist-proxy/releases"),n(l)])]),j]),_:1}),A,t("p",null,[e("The "),M,e(" is the "),n(r,{to:"/config/other.html#token"},{default:a(()=>[e("token")]),_:1}),e(" of admin user.")]),K])}const D=u(g,[["render",R],["__file","common.html.vue"]]);export{D as default};
