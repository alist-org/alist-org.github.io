import{_ as n}from"./open-with-255bbd12.js";import{_ as t,X as o,Y as i,Z as e,a1 as a,$ as p,a2 as r,G as l}from"./framework-1d63669c.js";const d={},c=r(`<h1 id="preview-settings" tabindex="-1"><a class="header-anchor" href="#preview-settings" aria-hidden="true">#</a> Preview settings</h1><h3 id="text-types" tabindex="-1"><a class="header-anchor" href="#text-types" aria-hidden="true">#</a> Text types</h3><p>The extensions of the files you want to preview as text, split by <code>,</code>, such as <code>txt,md,go,tsx</code>.</p><h3 id="audio-types" tabindex="-1"><a class="header-anchor" href="#audio-types" aria-hidden="true">#</a> Audio types</h3><p>The extensions of the files you want to preview as audio, split by <code>,</code>, such as <code>mp3,wav,m4a</code>.</p><h3 id="video-types" tabindex="-1"><a class="header-anchor" href="#video-types" aria-hidden="true">#</a> Video types</h3><p>The extensions of the files you want to preview as video, split by <code>,</code>, such as <code>mp4,webm,ogg</code>.</p><h3 id="image-types" tabindex="-1"><a class="header-anchor" href="#image-types" aria-hidden="true">#</a> Image types</h3><p>The extensions of the files you want to preview as image, split by <code>,</code>, such as <code>jpg,jpeg,png,gif,webp</code>.</p><h3 id="proxy-types" tabindex="-1"><a class="header-anchor" href="#proxy-types" aria-hidden="true">#</a> Proxy types</h3><p>The extensions of the files you want to separately set to download through proxy</p><h3 id="external-previews" tabindex="-1"><a class="header-anchor" href="#external-previews" aria-hidden="true">#</a> External previews</h3><p>A json object that contains the external preview settings, It is defined as</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>extensions<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">//(url)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>the first key <code>extensions</code> is the file extensions that split by <code>,</code>(if it&#39;s startsWith <code>/</code>, it will be considered a regular expression), and the value is also a <code>key-value</code> object, the key is the preview name, and the value is the external url.</p><p>For the external url, we provide some variables for you to use:</p><ul><li><code>$url</code>: the file url</li><li><code>$name</code>: the file name</li><li><code>$e_url</code>: encodeURIComponent($url)</li><li><code>$b_url</code>: btoa($url)</li><li><code>$eb_url</code>: encodeURIComponent(btoa($url))</li></ul><p>Finally, the <code>External previews</code> will displayed a <code>Open with</code> menu while current file matched the <code>extensions</code>.</p><p>For example, set <code>External previews</code> to</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;txt&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;Notepad&quot;</span><span class="token operator">:</span> <span class="token string">&quot;notepad://$url&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;/.*/&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;VSCode&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vscode://$url&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>when we enter a file with the extension <code>txt</code>, it will show:</p><p><img src="`+n+`" alt="Open-with"></p><h3 id="iframe-previews" tabindex="-1"><a class="header-anchor" href="#iframe-previews" aria-hidden="true">#</a> Iframe previews</h3><p>Similar to <code>External previews</code>, but it will embed an iframe in current page directly.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If you want to use self-deployed onlyoffice to preview office files, you can add the configuration like this here:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;doc,docx,xls,xlsx,ppt,pptx&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;OnlyOffice&quot;</span><span class="token operator">:</span> <span class="token string">&quot;you_only_office_url&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="audio-cover" tabindex="-1"><a class="header-anchor" href="#audio-cover" aria-hidden="true">#</a> Audio cover</h3><p>The default audio cover.</p><h3 id="audio-autoplay" tabindex="-1"><a class="header-anchor" href="#audio-autoplay" aria-hidden="true">#</a> Audio autoplay</h3><p>Whether to automatically play audio files.</p><h3 id="video-autoplay" tabindex="-1"><a class="header-anchor" href="#video-autoplay" aria-hidden="true">#</a> Video autoplay</h3><p>Whether to automatically play video files.</p><h3 id="proxy-ignore-headers" tabindex="-1"><a class="header-anchor" href="#proxy-ignore-headers" aria-hidden="true">#</a> Proxy ignore headers</h3>`,32),u={href:"https://github.com/alist-org/alist/issues/2763",target:"_blank",rel:"noopener noreferrer"};function h(v,m){const s=l("ExternalLinkIcon");return o(),i("div",null,[c,e("p",null,[a("For details, please check: "),e("strong",null,[e("a",u,[a("https://github.com/alist-org/alist/issues/2763"),p(s)])])])])}const x=t(d,[["render",h],["__file","preview.html.vue"]]);export{x as default};
